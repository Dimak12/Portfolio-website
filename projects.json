[
    {
  "id": "goodies-store",
  "title": "Goodies Store",
  "subtitle": "A responsive e-commerce storefront built with Vue.js 3",
  "description": "A dynamic e-commerce web application featuring live product data, a shopping cart with state management, and a responsive design.",
  "fullDescription": "Goodies Store is a modern e-commerce web application built as a Single Page Application (SPA) using Vue.js 3 and Vite. It demonstrates strong command of component-based architecture, state management, and API integration.\n\n**Key Features:**\n- **Product Catalog**: Products are dynamically fetched from a REST API (FakeStoreAPI) and displayed with loading states.\n- **Shopping Cart**: Powered by Pinia (Vue's state management library), the cart allows users to add/remove items, view totals, and persist cart state across pages.\n- **Routing**: Vue Router enables smooth navigation between Home, Products, Cart, About, and Contact pages.\n- **Responsive Design**: Built with CSS Grid and Flexbox to ensure a seamless experience across devices.\n- **Reusable Components**: Header and Footer components provide consistent layout and navigation.\n\nThis project highlights front-end engineering skills, including API integration, state management, and responsive UI design.",
  "technologies": [
    "Vue.js 3",
    "Pinia",
    "JavaScript",
    "Vite",
    "REST API Integration",
    "State Management",
    "Responsive Design",
    "CSS"
  ],
  "status": "Completed",
  "duration": "3 weeks",
  "category": "Front-End Web Application",
  "images": [],
  "videos": [],
  "link": "https://goodiesstore.netlify.app"
  },

  {
    "id": "digit-recognition",
    "title": "Digit Recognition (ANN)",
    "subtitle": "Artificial Neural Network trained on MNIST and custom handwritten digits",
    "description": "Built an ANN in TensorFlow/Keras to classify handwritten digits. Achieved ~97.6% accuracy on MNIST and ~60% on custom handwritten data.",
    "fullDescription": "This project involved developing an **Artificial Neural Network (ANN)** to recognize handwritten digits (0‚Äì9). The model was implemented in **TensorFlow/Keras** and trained on the **MNIST dataset** (60,000 training images, 10,000 test images).\n\n### üß© Part 1: Training on MNIST\n- Preprocessed and normalized 28√ó28 grayscale digit images.\n- Flattened images into 784-feature vectors.\n- Built a 4-layer ANN with ReLU, Tanh, Sigmoid, and Softmax activations.\n- Achieved **~97.6% accuracy** on the MNIST test set.\n\n### ‚úçÔ∏è Part 2: Testing on Custom Data\n- Collected and preprocessed own handwritten digit images (resized, grayscale, normalized).\n- Evaluated the trained ANN on this dataset.\n- Achieved **~60% accuracy** ‚Äî highlighting the challenges of domain shift (real-world handwriting vs. MNIST).\n\n### üìä Key Learnings\n- Importance of **data preprocessing** (normalization, resizing).\n- How **activation functions, epochs, and learning rate** affect ANN performance.\n- Realized the need for **data augmentation** and more diverse training data to improve generalization.\n\n### üîÆ Future Improvements\n- Use a **Convolutional Neural Network (CNN)** for better feature extraction.\n- Apply **data augmentation** (rotation, scaling, shifting) to improve generalization.\n- Collect a larger and more diverse custom dataset.",
    "technologies": [
      "Python",
      "TensorFlow",
      "Keras",
      "NumPy",
      "Matplotlib",
      "Seaborn",
      "PIL"
    ],
    "status": "Completed",
    "duration": "2 weeks",
    "category": "AI & Machine Learning",
    "images": [
      "assets/images/digit-recognition/mnist-samples.png",
      "assets/images/digit-recognition/mnist-confusion.png",
      "assets/images/digit-recognition/training-accuracy.png",
      "assets/images/digit-recognition/custom-samples.png",
      "assets/images/digit-recognition/custom-confusion.png",
      "assets/images/digit-recognition/accuracy.png"
    ],
    "videos": [],
    "github": "https://github.com/Dimak12/DigitsRecognition/tree/main"
  },

  {
  "id": "intrusion-detection",
  "title": "Deep Learning Based IDS",
  "subtitle": "AI-driven cybersecurity solution for next-generation networks",
  "description": "A research project developing a deep learning-based IDS for hybrid SDN environments, integrating AI with OpenDaylight for real-time threat detection and mitigation.",
  "fullDescription": "This research project focuses on developing an advanced Intrusion Detection System (IDS) for hybrid Software-Defined Networks (SDN). The system leverages deep learning models (CNN, RNN, LSTM, GRU) to detect and mitigate cyber threats such as DDoS, DoS and probe attacks in real-time.\n\n**Key Features:**\n- **Hybrid SDN Testbed**: Built using Cisco IOS XRv, OpenDaylight, GNS3, and QEMU.\n- **Deep Learning Models**: CNN, RNN, LSTM, GRU architectures implemented in TensorFlow/Keras and PyTorch.\n- **Datasets**: InSDN and UNSW-NB15 datasets used for training and evaluation.\n- **Integration**: IDS integrated with OpenDaylight via northbound APIs to dynamically update flow rules and mitigate threats.\n- **Evaluation**: Performance measured using accuracy, F1-score, precision, recall, ROC/PR curves, and real-time attack simulations (Scapy, hping3, nmap).\n\nThis project demonstrates expertise in networking, cybersecurity, and AI, bridging the gap between SDN architectures and modern deep learning-based security solutions.",
  "technologies": [
    "Python",
    "Deep Learning",
    "Hybrid SDN",
    "IDS",
    "Cisco IOS XRv",
    "OpenDaylight",
    "GNS3",
    "QEMU",
    "Pandas",
    "TensorFlow",
    "Keras",
    "PyTorch",
    "NumPy",
    "Scikit-learn"
  ],
  "status": "In Progress",
  "duration": "Jan 2025 ‚Äì Present",
  "category": "Research & Development",
  "images": [],
  "videos": []
  },
  {
  "id": "bus-monitoring",
  "title": "School Bus Monitoring System",
  "subtitle": "IoT-based real-time student safety and attendance tracking solution",
  "description": "An IoT-powered school bus monitoring system using RFID, ESP32, GPS, Azure cloud, and Twilio SMS alerts to ensure student safety and efficient transport management.",
  "fullDescription": "This project develops an improved monitoring system using RFID, ESP32 microcontroller, GPS, and Microsoft Azure cloud technologies to enhance efficiency and child safety during school bus transportation.\n\nThe system consists of a bus unit that detects student boarding/disembarking via RFID tags. This data is collected by an ESP32 microcontroller and transmitted to a Microsoft Azure server. The server hosts a database and web application for the school admin to view and manage the system. Real-time SMS notifications are sent to parents via Twilio when students board or leave the bus.\n\nKey features include:\n- RFID-based student authentication and attendance tracking\n- ESP32 microcontroller for data acquisition and communication\n- GPS module for real-time bus location tracking\n- Microsoft Azure-hosted database and web application for admin management\n- Twilio SMS integration for instant parent notifications\n\nThe system was prototyped, tested, and shown to improve student safety, optimize bus operations, and simplify attendance management.",
  "technologies": ["RFID","ESP32","GPS","Microsoft Azure","Twilio SMS","Database","PHP","IoT","Cloud Computing"],
  "status": "Completed",
  "duration": "6 months",
  "category": "IoT & Safety",
  "images": ["assets/images/bus_monitoring/Sys Design.png","assets/images/bus_monitoring/restricted access.png", "assets/images/bus_monitoring/Management system.png", "assets/images/bus_monitoring/GPS tracking.png", "assets/images/bus_monitoring/SMS alert.jpg", "assets/images/bus_monitoring/Student logs.png"],
  "videos": [],
  "github": "https://github.com/Dimak12/schoolBusMonitoring" 
  },
  
  {
  "id": "solar-controller",
  "title": "Solar Charge Controller",
  "subtitle": "Arduino-based PWM solar charge controller for 12V lead-acid batteries",
  "description": "A microcontroller-driven solar charge controller using PWM to safely charge a 12V lead-acid battery, with real-time monitoring and automatic overcharge protection.",
  "fullDescription": "This project involves the design, simulation, and realization of a solar charge controller for charging a 12V lead-acid car battery. The system is based on the PWM (Pulse Width Modulation) method for efficient charging, controlled by an Arduino Uno microcontroller.\n\nThe Arduino measures the voltage and current from the solar panel and the battery, generating a PWM signal to regulate charging. Charging is automatically stopped when the battery reaches 14.4V (the recommended full charge voltage) and resumed when the battery voltage drops. This ensures safe charging and prevents overcharging.\n\nThe system was first simulated in Tinkercad and then implemented as a physical prototype. An LCD display provides real-time feedback on battery voltage, charging current, and charging status. The prototype successfully charged the battery to 14.4V and maintained stable operation under varying conditions.\n\nKey features:\n- PWM-based charging control\n- Automatic overcharge prevention at 14.4V\n- Real-time monitoring of voltage and current\n- LCD display for user feedback\n- Simulation in Tinkercad and physical prototype testing\n\nThis project demonstrates the integration of renewable energy systems with embedded microcontroller programming to create a cost-effective and efficient solar charging solution.",
  "technologies": [
    "Arduino Uno",
    "C/C++",
    "PWM Control",
    "Tinkercad Simulation",
    "LCD Display",
    "Renewable Energy",
    "Embedded Systems",
    "Battery Management"
  ],
  "status": "Completed",
  "duration": "3 months",
  "category": "Embedded Systems",
  "images": ["assets/images/Solar charge controller/Final circuit design.png", "assets/images/Solar charge controller/Physical solar charge.png"],
  "videos": [],
  "github": "https://github.com/Dimak12/Solar-charge-Controller"
  },
  {
  "id": "serviceme",
  "title": "ServiceMe Platform",
  "subtitle": "On-demand home services booking platform",
  "description": "A web application for booking house cleaning and gardening services, featuring user accounts, service provider profiles, booking management, and secure payments.",
  "fullDescription": "ServiceMe is a web application designed to connect homeowners with trusted service providers for house cleaning and gardening services. The platform provides a seamless experience for both customers and service providers.\n\nKey features include:\n- **User Accounts**: Customers and service providers can sign up and log in. Service providers can create detailed profiles with their services, photos, and descriptions.\n- **Service Booking**: Customers can book house cleaning or gardening services by specifying details such as number of rooms, garden size, date, time, and location.\n- **Agent Selection**: After entering booking details, customers can browse available service providers, view their profiles, ratings, and specialties, and select the one they prefer.\n- **Billing & Payments**: A secure billing page allows customers to enter payment details and confirm bookings. Successful payments redirect to confirmation pages.\n- **Notifications & Feedback**: Customers receive booking confirmations, and service providers can manage their schedules. Feedback and ratings help maintain service quality.\n\nThe system was tested extensively, including sign-up, login, booking, agent selection, and billing workflows. All tests passed successfully, confirming that the application is ready for real-world use.\n\nThis project demonstrates the integration of web development, database management, and secure payment systems to create a practical and user-friendly service platform.",
  "technologies": [
    "Java",
    "JavaScript",
    "MySQL Database",
    "HTML",
    "CSS",
    "User Authentication"
  ],
  "status": "Completed",
  "duration": "5 months",
  "category": "Web Application",
  "images": [],
  "videos": ["assets/videos/Service Me updated 2.mp4"],
  "github": "https://github.com/Dimak12/ServiceMe"
  },
  {
  "id": "connect-social",
  "title": "Connect Social Platform",
  "subtitle": "A Twitter-inspired social networking platform with real-time interactions",
  "description": "A social networking platform where users can sign up, create profiles, follow others, and share posts in a real-time feed.",
  "fullDescription": "Connect is a modern social networking platform designed to replicate and enhance the core features of Twitter. It allows users to create accounts, manage profiles, follow/unfollow others, and share posts in a real-time feed.\n\n**Key Features:**\n- **User Authentication & Validation**: Secure login and signup with validation for usernames, emails, and passwords. Prevents duplicate accounts.\n- **Profile Management**: Users can upload profile pictures, edit their bio, and update personal details.\n- **Posting System**: Users can create posts that appear instantly in the feed with timestamps, usernames, and avatars.\n- **Following System**: Users can follow/unfollow others. The feed dynamically updates to show posts only from followed users.\n- **Search Functionality**: Search for users by name or username, view their profile info, and follow/unfollow directly from search results.\n- **Responsive Feed**: Posts are displayed in chronological order with a clean, Twitter-like UI.\n\nThe project was implemented using JSP, Servlets, and MySQL for backend logic and persistence, with AJAX and jQuery for dynamic interactions. It demonstrates full-stack development skills, combining frontend design, backend logic, and database integration.",
  "technologies": [
    "Java (JSP/Servlets)",
    "MySQL",
    "JDBC",
    "HTML",
    "CSS",
    "JavaScript",
    "jQuery",
    "AJAX",
    "User Authentication"
  ],
  "status": "Completed",
  "duration": "6 months",
  "category": "Social Platform",
  "images": [],
  "videos": ["assets/videos/Connect_presentation.mp4"],
  "github": "https://github.com/Dimak12/Connect"
  }
]
